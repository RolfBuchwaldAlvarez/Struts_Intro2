<?xml version="1.0" encoding="UTF-8"?>

<!-- To specify the relationship between a URL, a Java class, and a view page (such as index.jsp) -->
<!-- This configuration tells the framework that if the URL ends in index.action to redirect the
     browser to index.jsp -->

<!DOCTYPE struts PUBLIC
        "-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
        "http://struts.apache.org/dtds/struts-2.5.dtd">

<struts>
    <constant name="struts.devMode" value="true" />
    <constant name="struts.custom.i18n.resources" value="global" />

    <package name="basicstruts2" extends="struts-default">

        <!-- ExceptionMappingInterceptor class API - S2 interceptor of the default stack -->
        <!-- Configures a new stack of Struts 2 interceptors named appDefaultStack. This stack of interceptors
             is based upon the defaultStack of interceptors (which are the S2 interceptors that execute by default
             whenever an Action class method is called by S2F). -->
        <interceptors>
            <interceptor-stack name="appDefaultStack">
                <interceptor-ref name="defaultStack">
                    <!-- In the definition of the struts defaultStack, the ExceptionMappingInterceptor is given the
                         name of exception. B< specifying a param node with name="exception.logEnabled" and a value
                         of "true", the logEnabled parameter of ExceptionMappingInterceptor class is set to "true".
                         Now when the application throws an uncaught exception, S2F will handle it and will also
                         write an entry to the log that includes the stack trace. -->
                    <param name="exception.logEnabled">true</param>
                    <!-- Level to log exceptions set to be ERROR -->
                    <param name="exception.logLevel">ERROR</param>
                </interceptor-ref>
            </interceptor-stack>
        </interceptors>

        <default-interceptor-ref name="appDefaultStack" />

        <!-- Relates the result value to a specific view page. For example the result “securityerror” will
             cause the framework to redirect the user’s browser to the securityerror.jsp view page. -->
        <global-results>
            <result name="securityerror">/securityerror.jsp</result>
            <result name="error">/error.jsp</result>
        </global-results>

        <!-- Tells S2F what to do if an uncaught exception of the type specified (or a child of that type) is
             thrown by the the application. For example if a SecurityBreachException is thrown but not caught,
             the Struts 2 Action class will return a result of “securityerror”. All other uncaught exceptions
             will cause the Struts 2 Action class to return a result of “error”. -->
        <global-exception-mappings>
            <exception-mapping exception="org.apache.struts.register.exceptions.SecurityBreachException"
                               result="securityerror" />
            <exception-mapping exception="java.lang.Exception" result="error" />
        </global-exception-mappings>

        <!-- Specifies that if the method throwSecurityException throws an uncaught exception of type
             SecurityBreachException S2F should return a result of login. The login result will cause
             the user’s browser to be redirected to login.jsp. Action-specific exception mapping comes
             before global exception mapping! -->
        <action name="actionspecificexception" class="org.apache.struts.register.action.Register"
                method="throwSecurityException">
            <exception-mapping exception="org.apache.struts.register.exceptions.SecurityBreachException" result="login" />
            <result>/register.jsp</result>
            <result name="login">/login.jsp</result>
        </action>

        <action name="index">
            <result>/index.jsp</result>
        </action>

        <!-- We need a mapping to tie the URL, the HelloWorldAction class (MVC Controller), and the
             HelloWorld.jsp (MVC View) together. The mapping tells the S2F which class will respond
             to the user's action (URL), which method of that class will be executed, and what view
             to render based on the String result that method returns. -->
        <action name="hello" class="org.apache.struts.helloworld.action.HelloWorldAction" method="execute">
            <result name="success">/HelloWorld.jsp</result>
        </action>
        <!-- Instructs S2F to execute RegisterAction class's input method in response to action registerInput.
             input() is inherited by class RegisterAction from class ActionSupport. Default behavior input()
             is to return the String input. -->
        <action name="registerInput" class="org.apache.struts.register.action.Register" method="input" >
            <!-- Result node specifies that if returned result is input then render register.jsp -->
            <result name="input">/register.jsp</result>
        </action>
        <action name="register" class="org.apache.struts.register.action.Register" method="execute">
            <result name="success">/thankyou.jsp</result>
            <!-- To redisplay the web page that has the form and include error messages to inform what
                 went wrong -->
            <result name="input">/register.jsp</result>
        </action>
    </package>
</struts>